generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  phone          String?
  location       String?
  profilePicture String?
  role           Role
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  jobSeeker      JobSeeker?
  employer       Employer?
}

enum Role {
  JOB_SEEKER
  EMPLOYER
}

model JobSeeker {
  id          Int           @id @default(autoincrement())
  userId      Int           @unique
  resume      String?
  linkedin    String?
  github      String?
  skills      String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  education   Education[]
  experience  Experience[]
  projects    Project[]
  preferences Preferences?
  applications Application[]
}

model Employer {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  companyName   String
  companyUrl    String?
  companySize   String?
  industry      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs          Job[]
}

model Education {
  id           Int       @id @default(autoincrement())
  seekerId     Int
  institution  String
  degree       String
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?
  grade        String?
  description  String?

  jobSeeker    JobSeeker @relation(fields: [seekerId], references: [id], onDelete: Cascade)
}

model Experience {
  id          Int       @id @default(autoincrement())
  seekerId    Int
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean   @default(false)
  description String?
  location    String?

  jobSeeker   JobSeeker @relation(fields: [seekerId], references: [id], onDelete: Cascade)
}

model Project {
  id          Int       @id @default(autoincrement())
  seekerId    Int
  title       String
  description String?
  technologies String[]
  startDate   DateTime?
  endDate     DateTime?
  githubUrl   String?
  liveUrl     String?
  isActive    Boolean   @default(false)

  jobSeeker   JobSeeker @relation(fields: [seekerId], references: [id], onDelete: Cascade)
}

model Preferences {
  id              Int       @id @default(autoincrement())
  seekerId        Int       @unique
  preferredRoles  JobRole[]
  preferredJobTypes JobType[]
  preferredLocations String[]
  salaryExpectationMin Float?
  salaryExpectationMax Float?
  remoteWork      Boolean   @default(false)
  willingToRelocate Boolean @default(false)

  jobSeeker       JobSeeker @relation(fields: [seekerId], references: [id], onDelete: Cascade)
}

model Job {
  id           Int         @id @default(autoincrement())
  employerId   Int
  title        String
  role         JobRole
  description  String
  requirements String?
  location     String?
  jobType      JobType
  salaryMin    Float?
  salaryMax    Float?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  employer     Employer    @relation(fields: [employerId], references: [id], onDelete: Cascade)
  formFields   JobFormField[]
  applications Application[]

  @@index([employerId])
  @@index([role])
  @@index([jobType])
  @@index([createdAt])
}

enum JobRole {
  SOFTWARE_ENGINEER
  BACKEND_DEVELOPER
  FRONTEND_DEVELOPER
  FULLSTACK_DEVELOPER
  DATA_SCIENTIST
  DATA_ANALYST
  DEVOPS_ENGINEER
  CLOUD_ENGINEER
  ML_ENGINEER
  AI_ENGINEER
  MOBILE_DEVELOPER
  ANDROID_DEVELOPER
  IOS_DEVELOPER
  UI_UX_DESIGNER
  PRODUCT_MANAGER
  PROJECT_MANAGER
  BUSINESS_ANALYST
  QA_ENGINEER
  TEST_AUTOMATION_ENGINEER
  CYBERSECURITY_ANALYST
  NETWORK_ENGINEER
  SYSTEM_ADMIN
  DATABASE_ADMIN
  BLOCKCHAIN_DEVELOPER
  GAME_DEVELOPER
  TECH_SUPPORT
  CONTENT_WRITER
  DIGITAL_MARKETER
  SALES_ASSOCIATE
  HR_MANAGER
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
}

model JobFormField {
  id          Int        @id @default(autoincrement())
  jobId       Int
  label       String      // e.g., "Expected CTC", "Why should we hire you?"
  fieldType   FieldType   // text, number, textarea, etc.
  isRequired  Boolean     @default(true)
  order       Int         @default(0) // For ordering fields in forms

  job         Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  responses   ApplicationResponse[]

  @@index([jobId])
}

enum FieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
  LOCATION
  RESUME_URL
  TEXTAREA
  SELECT
  MULTISELECT
  CHECKBOX
  DATE
}

model Application {
  id          Int        @id @default(autoincrement())
  jobId       Int
  seekerId    Int
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  jobSeeker   JobSeeker  @relation(fields: [seekerId], references: [id], onDelete: Cascade)
  job         Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  responses   ApplicationResponse[]

  @@unique([jobId, seekerId]) // Prevent duplicate applications
  @@index([seekerId])
  @@index([jobId])
  @@index([status])
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model ApplicationResponse {
  id          Int        @id @default(autoincrement())
  applicationId Int
  fieldId     Int
  answer      String

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  field       JobFormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([applicationId, fieldId]) // One response per field per application
}
